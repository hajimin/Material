import os
import time
import numpy as np
import pandas as pd
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager

os.chdir('C:/Commodity/')

def get_init_price():
    # 빈 데이터 프레임 생성
    item=pd.DataFrame(columns=['idx', 'date1', 'date2','종가','전월대비','고점','저점','차이'])

    # webdriver 자동 version 업데이트
    driver = webdriver.Chrome(ChromeDriverManager().install())

    # site open
    website = 'https://www.marinevesseltraffic.com/2013/06/bunker-prices-singapore-rotterdam.html'
    driver.get(website)
    time.sleep(3)

    # iframe 접근하려면 창 전환 필요
    content = driver.find_element_by_xpath('/html/body/div[2]/div[2]/center/div/iframe')
    driver.switch_to.frame(content)

    # iframe 내 cilke
    WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="row-sg-sin-VLSFO"]/a'))).click()
    time.sleep(12)

    # element table에 접근 > tbody 접근
    xpath = driver.find_element(By.XPATH, '//*[@id="block_348"]')
    tbody = xpath.find_element(By.XPATH, '//*[@id="_VLSFO"]/table/tbody')

    # 테이블(tr, th, td) 값 가져오기
    for tr in tbody.find_elements(By.TAG_NAME,"tr")[:11]:
        txt = tr.find_element(By.TAG_NAME,"th").get_attribute("innerText")

        for td in tr.find_elements(By.TAG_NAME,"td")[:5]:
            txt += " " + td.get_attribute("innerText")

        #txt 한 뭉텅이로 들어오기 때문에 split 사용(공백 기준)
        df=pd.DataFrame(txt.split())

        # 하나의 행으로 입력되어 행열전환
        trans = np.transpose(df)

        # columns명 지정
        trans.columns = ['idx', 'date1', 'date2','price','compared','고점','저점','차이']

        # 아까 앞에서 만든 빈 데이터 프레임에 append
        item=item.append(trans,ignore_index=True)
        # item.to_excel('VLSFO_real.xlsx')


    import datetime

    # 데이터 값이 Dec 22 이렇게 들어오기때문에
    # 오늘 날짜 기준 년도 가져오기
    date_year = datetime.date.today().year

    month=item['date1']
    # Dec 를 datetime으로 변경 후 월만 추출
    # item['date1'] = list([pd.to_datetime(month, format='%b') for x in item['date1'].to_list()])
    item['date1'] = pd.to_datetime(item['date1'], format='%b')
    # item['date1']=str(item['date1'])
    item['date1'] = item['date1'].dt.month
    # item['date1'] = str(item['date1']).split('-')[1]

    item['code']='VLSFO'

    item['year']=str(date_year)
    if str(item.date1) == '12':
        item['year']=str(int(item.year)-1)
    else:
        item['year']=item.year

    # 년 + 월 + 일 합쳐 문자열-> datetime 변경 (이때, 초단위까지 나오므로 문자열로 한번더 type변경)
    item['date']=item['year']+'-'+str(item['date1'])+'-'+item['date2']
    item['date']=pd.to_datetime(item['date'], format='%Y-%m-%d')

    # test 위해 date3으로 했는데, 그냥 date로 해도 무방하다고 생각됩니다
    item['date3']=item['date'].dt.strftime('%Y-%m-%d').astype('str')
    final = item[['date3','code','price','compared']]
    final.columns = ['DATE','CODE','PRICE','COMPARED']


    import sqlalchemy

    engine = sqlalchemy.create_engine("oracle://ID:PW@IP:PORT")
    final.to_sql('TableName', con=engine, if_exists='append', chunksize=1000, index=False)

    return final


get_init_price()

