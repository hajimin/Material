import os
import time
import re
import pandas as pd
from datetime import datetime
import sqlalchemy
def get_init_price(code):
    delay = 0.01
    page = 1
    result = []
    flag = 0
    start_time = datetime.now()
    if code == 'FX_USDKRW':                                                 # 환율(FX_USDKRW)
      flag = 0
    else :                                                                  # 두바이유(OIL_DU), 은(CMDT_SI), 주석(CMDT_SDY)
      flag = 1
    # 수집
    print('[{}] 데이터 수집 시작 (code: {})'.format(start_time.strftime('%Y/%m/%d %H:%M:%S'), code))
    while (True):
        if flag == 0:                                                       # 환율(FX_USDKRW)
            url = 'https://finance.naver.com/marketindex/exchangeDailyQuote.naver?marketindexCd={}&fdtc=2&page={}'.format(code, page)
            data = pd.read_html(url)[0]
        else:                                                               # 두바이유(OIL_DU), 은(CMDT_SI), 주석(CMDT_SDY)
            url = 'https://finance.naver.com/marketindex/worldDailyQuote.nhn?marketindexCd={}&fdtc=2&page={}'.format(code, page)
            data = pd.read_html(url)[0].dropna()
        if page != 1:
            try:
                if data.iloc[-1, 0] == result[-1].iloc[-1, 0]:
                    break
            except:
                break
        result.append(data)
        page += 1
        time.sleep(delay)
    # 가공
    price = pd.concat(result).reset_index(drop=True)
    if flag == 0:
        price.columns = ['DATE', 'PRICE', 'COMPARED', '현찰 - 사실때', '현찰 - 파실때', '송금 - 보내실때', '송금 - 받으실때', 'T/C사실 때', '외화수표 파실때']
        # price.style.hide_index()
        price['DATE'] = price['DATE'].apply(lambda x: datetime.strptime(x, '%Y.%m.%d'))
        price['DATE'] = price['DATE'].dt.strftime('%Y-%m-%d')
        price = price[['DATE', 'PRICE', 'COMPARED']]
        price['CODE'] = code


    else:
        price.columns = ['DATE', 'PRICE', 'COMPARED', '등락율']
        price['DATE'] = price['DATE'].apply(lambda x: datetime.strptime(x, '%Y.%m.%d'))
        price['DATE'] = price['DATE'].dt.strftime('%Y-%m-%d')
        price = price[['DATE', 'PRICE', 'COMPARED']]
        price['CODE']=code
    price=price[['DATE','CODE','PRICE','COMPARED']]
    end_time = datetime.now()
    engine = sqlalchemy.create_engine("oracle://ID:PW@IP:PORT")
    price.to_sql('TableName', con=engine, if_exists='append', chunksize=1000, index=False)

    print('[{}] 데이터 수집을 종료합니다. (code: {}, 수집시간: {}초, 데이터수: {:,}개)'.format(end_time.strftime('%Y/%m/%d %H:%M:%S'), code,
                                                                      (end_time - start_time).seconds,
                                                                      len(price)))
    return price

def get_daily_price(code):
    delay = 0.01
    page = 1
    result = []
    newData = []
    flag = 0
    start_time = datetime.now()
    if code == 'FX_USDKRW':                                                     # 환율(FX_USDKRW)
      flag = 0
    else :                                                                      # 두바이유(OIL_DU), 은(CMDT_SI), 주석(CMDT_SDY)
      flag = 1
    price =[]
    # 수집
    print('[{}] 데이터 수집 시작 (code: {})'.format(start_time.strftime('%Y/%m/%d %H:%M:%S'), code))
    if flag == 0:  # 환율(FX_USDKRW)
        url = 'https://finance.naver.com/marketindex/exchangeDailyQuote.naver?marketindexCd={}&fdtc=2&page={}'.format(code, page)
        data = pd.read_html(url)[0]
    else:  # 두바이유(OIL_DU), 은(CMDT_SI), 주석(CMDT_SDY)
        url = 'https://finance.naver.com/marketindex/worldDailyQuote.nhn?marketindexCd={}&fdtc=2&page={}'.format(code,page)
        data = pd.read_html(url)[0].dropna()
    new_date_data = data.loc[1:]                                                # 최신 일자 데이터
    new_date = data.iloc[0,0]                                                   # 날짜 비교를 위한 new_date
    new_date = new_date.replace('.','-')
    date_time_obj = datetime.strptime(new_date, '%Y-%m-%d')

    csv_data = pd.read_csv(code + '.csv', index_col=0, encoding='utf-8')        # 머리글은 제외하고 기존 데이터 read
    csv_max_date =csv_data.max()[1][:10]                                        # 날짜 비교를 위한 기존 csv_max_date
    csv_data['DATE'] = csv_data['DATE'].apply(lambda x: x[:10])
    if re.sub('[^0-9]', '', new_date) > re.sub('[^0-9]', '', csv_max_date) :    # new_date 가 csv_max_date 보다 클 경우 병합
        newData.append(new_date_data)                                           # 신규 데이터 list 형태로 만들어줌
        price = pd.concat(newData).reset_index(drop=True)
        if flag == 0:
            # 컬럼명칭 부여
            price.style.hide_index()

            price.columns = ['DATE', '종가', '전일대비', '현찰 - 사실때', '현찰 - 파실때', '송금 - 보내실때', '송금 - 받으실때', 'T/C사실 때','외화수표 파실때']
        else:
            price.style.hide_index()

            price.columns = ['DATE', 'CODE', 'PRICE', 'COMPARED']
        price['DATE'] = price['DATE'].apply(lambda x: datetime.strptime(x, '%Y.%m.%d'))
        price['DATE'] = price['DATE'].astype(str)                                # 불러온 csv 의 날짜는 타입이 문자열이라 동일하게 맞춰줌
        price = price[['DATE', 'PRICE', 'COMPARED']]                             # 기존 데이터 컬럼과 동일하게 추출
        price['CODE'] = code                                                     # 기존 데이터와 동일하게 하기 위함
        result = pd.concat([price, csv_data]).reset_index(drop=True)             # 신규 + 기존 데이터 처리 후 index 초기화
        print(result)
    else:
        result = csv_data                                                        # 기존 데이터 그대로 저장
    time.sleep(delay)
    end_time = datetime.now()
    print('[{}] 데이터 수집을 종료합니다. (code: {}, 수집시간: {}초, 데이터수: {:,}개)'.format(end_time.strftime('%Y/%m/%d %H:%M:%S'), code,
                                                                          (end_time - start_time).seconds,
                                                                          len(price)))
    return result;
